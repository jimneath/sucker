var search_data = {"index":{"searchIndex":["sucker","mockresponse","request","response","<<()","associate_tag=()","curl()","get()","key=()","new()","new()","new()","new()","node()","stub()","to_hash()","valid?()","xml()","license","readme.markdown","sucker.rb","request.rb","response.rb","stub.rb","version.rb"],"longSearchIndex":["lib/sucker.rb","sucker","sucker","sucker","sucker::request","sucker::request","sucker::request","sucker::request","sucker::request","sucker","sucker::mockresponse","sucker::request","sucker::response","sucker::response","sucker","sucker::response","sucker::response","sucker::response","files/license.html","files/readme_markdown.html","files/lib/sucker_rb.html","files/lib/sucker/request_rb.html","files/lib/sucker/response_rb.html","files/lib/sucker/stub_rb.html","files/lib/sucker/version_rb.html"],"info":[["Sucker","lib/sucker/request.rb","classes/Sucker.html"," < ","encoding: utf-8 --- encoding: utf-8 --- encoding: utf-8 --- encoding: utf-8 --- = Sucker Sucker is a",1],["MockResponse","Sucker","classes/Sucker/MockResponse.html"," < Response","Stubs Sucker::Response to run specs offline. ",1],["Request","Sucker","classes/Sucker/Request.html"," < Object","A wrapper around the API request ",1],["Response","Sucker","classes/Sucker/Response.html"," < Object","A Nokogiri-driven wrapper around the cURL response ",1],["<<","Sucker::Request","classes/Sucker/Request.html#M000001","(hash)","A helper method that merges a hash into the parameters ",2],["associate_tag=","Sucker::Request","classes/Sucker/Request.html#M000002","(token)","A helper method that sets the associate tag ",2],["curl","Sucker::Request","classes/Sucker/Request.html#M000003","()","A reusable, configurable cURL object ",2],["get","Sucker::Request","classes/Sucker/Request.html#M000004","()","Performs the request and returns a response object ",2],["key=","Sucker::Request","classes/Sucker/Request.html#M000005","(token)","A helper method that sets the AWS Access Key ID ",2],["new","Sucker","classes/Sucker.html#M000021","(args={})","",2],["new","Sucker::MockResponse","classes/Sucker/MockResponse.html#M000019","(mock_response_body)","",2],["new","Sucker::Request","classes/Sucker/Request.html#M000000","(args)","",2],["new","Sucker::Response","classes/Sucker/Response.html#M000012","(curl)","",2],["node","Sucker::Response","classes/Sucker/Response.html#M000013","(path)","Queries an xpath and returns result as an array of hashes ",2],["stub","Sucker","classes/Sucker.html#M000020","(request)","Records a request on first run and fakes subsequently ",2],["to_hash","Sucker::Response","classes/Sucker/Response.html#M000014","()","Parses the response into a simple hash ",2],["valid?","Sucker::Response","classes/Sucker/Response.html#M000015","()","",2],["xml","Sucker::Response","classes/Sucker/Response.html#M000016","()","The XML document ",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","(The MIT License)   Copyright (c) 2009 Paper Cavalier   Permission is hereby granted, free of charge,",3],["README.markdown","files/README_markdown.html","files/README_markdown.html","","Sucker ======  Sucker is a Ruby wrapper to the [Amazon Product Advertising API](https://affiliate-program.amazon.co.uk/gp/advertising/api/detail/main.html).",3],["sucker.rb","files/lib/sucker_rb.html","files/lib/sucker_rb.html","","encoding: utf-8 ",3],["request.rb","files/lib/sucker/request_rb.html","files/lib/sucker/request_rb.html","","encoding: utf-8 --- encoding: utf-8 --- encoding: utf-8 --- encoding: utf-8 --- = Sucker Sucker is a",3],["response.rb","files/lib/sucker/response_rb.html","files/lib/sucker/response_rb.html","","encoding: utf-8 ",3],["stub.rb","files/lib/sucker/stub_rb.html","files/lib/sucker/stub_rb.html","","encoding: utf-8 ",3],["version.rb","files/lib/sucker/version_rb.html","files/lib/sucker/version_rb.html","","encoding: utf-8 ",3]]}}